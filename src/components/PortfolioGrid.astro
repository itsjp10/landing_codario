---
import { Image } from 'astro:assets';
import mock1 from '../assets/mock1.jpg';
import mock2 from '../assets/mock2.jpg';
import mock3 from '../assets/mock3.jpg';
import mock4 from '../assets/mock4.jpg';
import mock5 from '../assets/mock5.jpg';
import mock6 from '../assets/mock6.jpg';

const projects = [
	{
		title: 'OrbitOps Launch',
		industry: 'SaaS · Operations',
		kpi: '↑ 42% conversion in 30 days',
		description:
			'OrbitOps needed a high-converting product launch that connected operations teams to their automation platform. We rebuilt the narrative, simplified the onboarding flow, and shipped in 12 days.',
		image: mock1,
		href: '#',
		modal: {
			overview:
				'We designed a modular hero system, integrated product video inlined above the fold, and connected sign-ups to the CRM. Split testing generated a 42% conversion lift against the legacy page.',
			highlights: ['Ship time: 12 days', 'Tooling: Astro, Vercel, HubSpot', 'Assets: Landing, email flow, analytics dashboards'],
		},
	},
	{
		title: 'Northwind CRM',
		industry: 'B2B Services',
		kpi: '↓ 28% bounce rate',
		description:
			'A lead-generation experience that feeds multiple industries while preserving clarity. We created industry-specific sections and a pricing calculator tied to analytics.',
		image: mock2,
		href: '#',
		modal: {
			overview:
				'Micro-interactions on pricing toggles and reorganized flows deliver clarity to prospects. Integrations push qualified leads to Salesforce with contextual data.',
			highlights: ['Ship time: 3 weeks', 'Tooling: Astro, Alpine.js, Salesforce', 'Deliverables: Landing, calculator widget'],
		},
	},
	{
		title: 'Brightside Portal',
		industry: 'Healthcare',
		kpi: '↑ 31% engagement',
		description:
			'A patient portal redesign with a focus on accessibility and mobile usage. We delivered a responsive dashboard, scheduling flows, and educational content library.',
		image: mock3,
		href: '#',
		modal: {
			overview:
				'We embedded WCAG AA standards, added video explainers, and improved dashboards for provider messaging. Engagement increased as patients completed onboarding steps.',
			highlights: ['Ship time: 6 weeks', 'Tooling: React, Astro Islands, Supabase', 'Deliverables: Portal UI, content management'],
		},
	},
	{
		title: 'AtlasPay Console',
		industry: 'Fintech',
		kpi: '↑ 19% ARPU',
		description:
			'Codario Labs unified AtlasPay’s console with new billing insights, churn alerts, and integration guides. We also automated release notes and tooltips.',
		image: mock4,
		href: '#',
		modal: {
			overview:
				'The console ships with live usage metrics, custom onboarding checklists, and triggered tooltips. GSAP-powered transitions improve orientation without sacrificing performance.',
			highlights: ['Ship time: 7 weeks', 'Tooling: Astro, React, Node APIs', 'Deliverables: Console UI, docs, automation'],
		},
	},
	{
		title: 'Launchpad DAO',
		industry: 'Web3',
		kpi: '↑ 55% signup conversion',
		description:
			'A marketing site and investor hub that simplifies Launchpad DAO’s token mechanics. We translated complex messaging into clear value props, product visuals, and CTAs.',
		image: mock5,
		href: '#',
		modal: {
			overview:
				'The hub integrates community stats, product roadmap, and investor FAQs. A localized content system ensures compliance messaging across regions.',
			highlights: ['Ship time: 15 days', 'Tooling: Astro, Contentful', 'Deliverables: Marketing site, investor hub, analytics'],
		},
	},
	{
		title: 'Nova Support Hub',
		industry: 'Customer Success',
		kpi: '↓ 34% resolution time',
		description:
			'We crafted a support knowledge base with AI search, templated macros, and analytics dashboards. Teams now ship new content in minutes.',
		image: mock6,
		href: '#',
		modal: {
			overview:
				'Automated workflows notify teams of content gaps. We built analytics dashboards that highlight ticket deflection and satisfaction trends.',
			highlights: ['Ship time: 4 weeks', 'Tooling: Astro, React, Airtable', 'Deliverables: Knowledge base, analytics, scripts'],
		},
	},
];
---

<section class="bg-white py-24" id="showcase">
	<div class="container space-y-12">
		<div class="mx-auto max-w-2xl text-center">
			<h2 class="text-sm font-semibold uppercase tracking-[0.4em] text-brand-dark/50">Showcase</h2>
			<p class="mt-4 text-3xl font-semibold text-brand-dark sm:text-4xl">Selected work driving outcomes for startups and SMB teams.</p>
			<p class="mt-4 text-sm text-brand-dark/65">
				Each project pairs ruthless prioritization with craftsmanship. Hover to preview the build and open details to inspect metrics, integrations, and the delivery timeline.
			</p>
		</div>

		<div class="grid gap-6 md:grid-cols-2 xl:grid-cols-3">
			{projects.map((project, index) => {
				const modalId = `project-modal-${index}`;
				return (
					<div class="group relative overflow-hidden rounded-3xl border border-brand-dark/10 bg-white shadow-[0_15px_45px_rgba(10,37,64,0.12)] transition duration-500 ease-brand hover:-translate-y-1 hover:shadow-card">
						<div class="relative overflow-hidden">
							<Image
								src={project.image}
								alt={`${project.title} preview`}
								format="webp"
								width={720}
								height={480}
								class="h-56 w-full object-cover transition duration-500 ease-brand group-hover:scale-[1.03]"
								loading="lazy"
							/>
							<div class="pointer-events-none absolute inset-0 bg-gradient-to-t from-brand-dark/30 via-transparent to-transparent opacity-0 transition duration-500 group-hover:opacity-100"></div>
							<div class="absolute left-6 top-6 inline-flex items-center gap-2 rounded-full bg-white/90 px-4 py-2 text-xs font-semibold uppercase tracking-[0.3em] text-brand-dark/60 shadow-soft">
								<span class="h-2.5 w-2.5 rounded-full bg-brand-lime"></span>
								{project.industry}
							</div>
						</div>
						<div class="flex flex-col gap-4 p-8">
							<div class="space-y-3">
								<h3 class="text-2xl font-semibold text-brand-dark">{project.title}</h3>
								<p class="text-sm font-semibold uppercase tracking-[0.3em] text-brand-dark/50">{project.kpi}</p>
								<p class="text-sm leading-relaxed text-brand-dark/70">{project.description}</p>
							</div>
							<div class="mt-auto flex items-center justify-between text-sm font-semibold text-brand-dark/70">
								<button
									class="inline-flex items-center gap-2 rounded-full border border-brand-dark/10 px-4 py-2 transition hover:border-brand-dark hover:bg-brand-dark hover:text-white focus-visible:outline-none focus-visible:ring-4 focus-visible:ring-brand-cyan/40"
									data-modal-open={modalId}
									type="button"
								>
									View case study
									<svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
										<path d="M5 12h14" stroke-linecap="round" />
										<path d="m12 5 7 7-7 7" stroke-linecap="round" stroke-linejoin="round" />
									</svg>
								</button>
								<a class="text-brand-cyan hover:text-brand-dark focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-cyan/40" href={project.href}>
									Live demo
								</a>
							</div>
						</div>
						<dialog
							id={modalId}
							class="rounded-3xl border border-brand-dark/10 bg-white/95 p-0 text-left backdrop:bg-brand-dark/30 backdrop:backdrop-blur"
						>
							<form method="dialog">
								<div class="space-y-6 p-8">
									<div class="flex items-start justify-between gap-6">
										<div>
											<p class="text-xs font-semibold uppercase tracking-[0.3em] text-brand-dark/50">{project.industry}</p>
											<h4 class="mt-2 text-2xl font-semibold text-brand-dark">{project.title}</h4>
										</div>
										<button
											type="submit"
											class="inline-flex h-10 w-10 items-center justify-center rounded-full border border-brand-dark/10 bg-brand-gray/80 text-brand-dark hover:bg-brand-gray focus-visible:outline-none focus-visible:ring-4 focus-visible:ring-brand-cyan/40"
											aria-label="Close case study"
										>
											<svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8">
												<path d="M18 6 6 18" stroke-linecap="round" />
												<path d="m6 6 12 12" stroke-linecap="round" />
											</svg>
										</button>
									</div>
									<p class="text-sm leading-relaxed text-brand-dark/70">{project.modal.overview}</p>
									<ul class="grid gap-3 text-sm text-brand-dark/80 md:grid-cols-2">
										{project.modal.highlights.map((item) => (
											<li class="rounded-2xl bg-brand-gray/80 px-4 py-3" key={item}>
												{item}
											</li>
										))}
									</ul>
									<div class="rounded-2xl border border-brand-dark/10 bg-brand-gray/60 p-4 text-xs text-brand-dark/60">
										<p>Interested in a similar build? Book a discovery call and we’ll unpack the tech stack, resourcing, and delivery approach.</p>
									</div>
								</div>
							</form>
						</dialog>
					</div>
				);
			})}
		</div>
	</div>
</section>

<script type="module" is:inline>
	const reduced = document.documentElement.dataset.reducedMotion === 'true';
	document.addEventListener('astro:page-load', () => {
		const modals = document.querySelectorAll('dialog[id^="project-modal-"]');
		modals.forEach((modal) => {
			const openers = document.querySelectorAll(`[data-modal-open="${modal.id}"]`);
			openers.forEach((button) => {
				button.addEventListener('click', () => {
					if (!reduced) {
						modal.classList.add('animate-modal');
					}
					modal.showModal();
				});
			});
			modal.addEventListener('cancel', (event) => {
				event.preventDefault();
				modal.close();
			});
			modal.addEventListener('click', (event) => {
				const target = event.target;
				if (!(target instanceof HTMLElement)) return;
				const rect = modal.getBoundingClientRect();
				const withinDialog =
					event.clientX >= rect.left &&
					event.clientX <= rect.right &&
					event.clientY >= rect.top &&
					event.clientY <= rect.bottom;
				if (!withinDialog) {
					modal.close();
				}
			});
			modal.addEventListener('close', () => {
				modal.classList.remove('animate-modal');
			});
		});
	});
</script>

<style is:global>
	dialog.animate-modal::backdrop {
		animation: fade-in 200ms ease-out forwards;
	}

	dialog.animate-modal {
		animation: pop-in 320ms var(--ease-brand, cubic-bezier(0.16, 1, 0.3, 1)) forwards;
	}

	@keyframes fade-in {
		from {
			backdrop-filter: blur(0);
			background: rgba(10, 37, 64, 0);
		}
		to {
			backdrop-filter: blur(14px);
			background: rgba(10, 37, 64, 0.3);
		}
	}

	@keyframes pop-in {
		from {
			opacity: 0;
			transform: translateY(20px) scale(0.96);
		}
		to {
			opacity: 1;
			transform: translateY(0) scale(1);
		}
	}
</style>
